import unittest
from game import *
from pprint import pprint

# dir: 0 - up, 1 - right, 2 - down, 3 - left
M_UP = 0
M_RIGHT = 1
M_DOWN = 2
M_LEFT = 3

class FlowLineTest(unittest.TestCase):
    def check(self, a, b):
        flow_line(a)
        self.assertEqual(a, b)

    def test_1(self):
        self.check([0, 0, 0, 0], [0, 0, 0, 0])
        self.check([0, 0, 2, 0], [2, 0, 0, 0])
        self.check([2, 0, 2, 0], [2, 2, 0, 0])
        self.check([0, 4, 0, 2], [4, 2, 0, 0])
        self.check([2, 2, 2, 2], [2, 2, 2, 2])
        self.check([2, 4, 8,16], [2, 4, 8,16])


class MergeLineTest(unittest.TestCase):
    def check(self, a, b):
        merge_line(a)
        self.assertEqual(a, b)

    def test_1(self):
        self.check([2, 2, 0, 0], [4, 0, 0, 0])
        self.check([2, 2, 2, 2], [4, 4, 0, 0])
        self.check([2, 4, 4, 8], [2, 8, 8, 0])
        self.check([0, 0, 0, 0], [0, 0, 0, 0])


class LineTest(unittest.TestCase):
    def check(self, a, b):
        flow_line(a)
        merge_line(a)
        self.assertEqual(a, b)

    def test_1(self):
        self.check([8, 0,16, 0], [8,16, 0, 0])
        self.check([0, 2, 0, 4], [2, 4, 0, 0])
        self.check([8, 0, 8, 0], [16,0, 0, 0])
        self.check([8, 4, 4, 4], [8, 8, 4, 0])


class FlowProbLineTest(unittest.TestCase):
    maxDiff = None
    def check(self, a, b):
        flow_prob_line(a)
        check_and_clean_row(a)
        self.assertEqual(a, b)

    def test_1(self):
        self.check([
          {0: 1.},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ], [
          {0: 1.},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ])

    def test_2(self):
        self.check([
          {0: 1.},
          {0: 1.},
          {0: .5, 2: .5},
          {0: 1.},
        ], [
          {0: .5, (2, 2): .5},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ])

    def test_3(self):
        self.check([
          {0: 1.},
          {0: .5, 4: .5},
          {0: .5, 2: .5},
          {0: 1.},
        ], [
          {0: .25, (2, 2): .25, (4, 1): .5},
          {0: .75, (2, 2): .25},
          {0: 1.},
          {0: 1.},
        ])

    def test_5(self):
        self.check([
          {0: .5, 4: .5},
          {0: 1.},
          {0: 1.},
          {0: .5, 4: .5},
        ], [
          {0: .25, (4, 0): .5, (4, 3): .25},
          {0: .75, (4, 3): .25},
          {0: 1.},
          {0: 1.},
        ])

    def test_7(self):
        self.check([
          {0: 1.},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
        ], [
          {0: .125, (4, 1): .5, (4, 2): .25, (4, 3): .125},
          {0: .5, (4, 2): .25, (4, 3): .25},
          {0: .875, (4, 3): .125},
          {0: 1.},
        ])

    def test_8(self):
        x = 1/16
        self.check([
          {0: .5, 4: .5},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
        ], [
          {0: 1*x, (4, 0): 8*x, (4, 1): 4*x, (4, 2): 2*x, (4, 3): x},
          {0: 5*x, (4, 1): 4*x, (4, 2): 4*x, (4, 3): 3*x},
          {0: 11*x, (4, 2): 2*x, (4, 3): 3*x},
          {0: 15*x, (4, 3): x},
        ])


class MergeCellTest(unittest.TestCase):
    maxDiff = None

    def test_1(self):
        b, a, sh = merge_cells({
            (4, 0): 8/16,
            (4, 1): 4/16,
            (4, 2): 2/16,
            (4, 3): 1/16,
            0: 1/16,
        }, {
            (4, 1): 4/16,
            (4, 2): 4/16,
            (4, 3): 3/16,
            0: 5/16,
        })
        self.assertEqual(b, {
            8: 11/16,
            (4, 0): 1/16,
            (4, 1): 1/16,
            (4, 2): 1/16,
            (4, 3): 1/16,
            0: 1/16,
        })
        #self.assertEqual(sh, {})
        #self.assertEqual(a, {
            #(4, 2): 2/16,
            #(4, 3): 3/16,
            #0: 11/16,
        #})

    def test_2(self):
        b, a, sh = merge_cells({
            (4, 1): 8/16,
            0: 8/16,
        }, {
            (4, 2): 2/16,
            (8, 2): 2/16,
            0: 12/16,
        })
        self.assertEqual(b, {0: 0.5, 8: 0.125, (4, 1): 0.375})
        self.assertEqual(a, {
            (8, 2): 2/16,
            0: 12/16,
        })
        self.assertEqual(sh, {2: 2/16})

    def test_2_1(self):
        b, a, sh = merge_cells({
          0: 2/16,
          (2, 2): 4/16,
          (2, 3): 2/16,
          (4, 1): 8/16,
        }, {
          0: 10/16,
          (2, 3): 6/16,
        })
        self.assertEqual(b, {0: 2/16, (2, 2): 2/16, (2, 3): 2/16, (4, 1): 8/16, 4: 2/16})
        self.assertEqual(a, {0: 10/16, (2, 3): 4/16})
        self.assertEqual(sh, {3: 2/16})


class MergeProbLineTest(unittest.TestCase):
    maxDiff = None
    def check(self, a, b):
        merge_prob_line(a)
        check_and_clean_row(a)
        self.assertEqual(a, b)

    def test_1(self):
        self.check([
          {0: .25, (2, 2): .25, (4, 1): .5},
          {0: .75, (2, 2): .25},
          {0: 1.},
          {0: 1.},
        ], [
          {0: .25, 2: .25, 4: .5},
          {0: .75, 2: .25},
          {0: 1.},
          {0: 1.},
        ])

    def test_2(self):
        self.check([
          {0: 2/16, (2, 2): 4/16, (2, 3): 2/16, (4, 1): 8/16},
          {0: 10/16, (2, 3): 6/16},
          {0: 1.},
          {0: 1.},
        ], [
          {0: 2/16, 2: 4/16, 4: 10/16},
          {0: 12/16, 2: 4/16},
          {0: 1.},
          {0: 1.},
        ])

    def test_5(self):
        self.check([
          {0: .25, (4, 0): .5, (4, 3): .25},
          {0: .75, (4, 3): .25},
          {0: 1.},
          {0: 1.},
        ], [
          {0: .25, 4: .5, 8: .25},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ])

    def test_7(self):
        self.check([
          {0: .125, (4, 1): .5, (4, 2): .25, (4, 3): .125},
          {0: .5, (4, 2): .25, (4, 3): .25},
          {0: .875, (4, 3): .125},
          {0: 1.},
        ], [
          {0: 1/8, 4: 3/8, 8: 4/8},
          {0: 7/8, 4: 1/8},
          {0: 1.},
          {0: 1.},
        ])

    def test_8(self):
        x = 1/16
        self.check([
          {0: 1*x, (4, 0): 8*x, (4, 1): 4*x, (4, 2): 2*x, (4, 3): x},
          {0: 5*x, (4, 1): 4*x, (4, 2): 4*x, (4, 3): 3*x},
          {0: 11*x, (4, 2): 2*x, (4, 3): 3*x},
          {0: 15*x, (4, 3): x},
        ], [
          {0: x, 4: 4*x, 8: 11*x},
          {0: 11*x, 4: 4*x, 8: x},
          {0: 1.},
          {0: 1.},
        ])


class ProbLineTest(unittest.TestCase):
    maxDiff = None
    def check(self, a, b):
        flow_prob_line(a)
        merge_prob_line(a)
        check_and_clean_row(a)
        self.assertEqual(a, b)

    def test_1(self):
        self.check([
          {0: 1.},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ], [
          {0: 1.},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ])

    def test_2(self):
        self.check([
          {0: 1.},
          {0: 1.},
          {0: .5, 2: .5},
          {0: 1.},
        ], [
          {0: .5, 2: .5},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ])

    def test_3(self):
        self.check([
          {0: 1.},
          {0: .5, 4: .5},
          {0: .5, 2: .5},
          {0: 1.},
        ], [
          {0: .25, 2: .25, 4: .5},
          {0: .75, 2: .25},
          {0: 1.},
          {0: 1.},
        ])

    def test_4(self):
        self.check([
          {0: .5, 4: .5},
          {0: 1.},
          {0: 1.},
          {0: .5, 2: .5},
        ], [
          {0: .25, 2: .25, 4: .5},
          {0: .75, 2: .25},
          {0: 1.},
          {0: 1.},
        ])

    def test_5(self):
        self.check([
          {0: .5, 4: .5},
          {0: 1.},
          {0: 1.},
          {0: .5, 4: .5},
        ], [
          {0: .25, 4: .5, 8: .25},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ])

    def test_6(self):
        self.check([
          {0: 1.},
          {0: .5, 4: .5},
          {0: 1.},
          {0: .5, 4: .5},
        ], [
          {0: .25, 4: .5, 8: .25},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ])

    def test_7(self):
        self.check([
          {0: 1.},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
        ], [
          {0: .125, 4: .375, 8: .5},
          {0: .875, 4: .125},
          {0: 1.},
          {0: 1.},
        ])

    def test_8(self):
        x = 1/16
        self.check([
          {0: .5, 4: .5},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
        ], [
          {0: x, 4: 4*x, 8: 11*x},
          {0: 11*x, 4: 4*x, 8: x},
          {0: 1.},
          {0: 1.},
        ])


class ProbMoveTest(unittest.TestCase):
    maxDiff = None

    def test_up(self):
        s = [
          {0: 1.},        {0: 1.}, {0: 1.}, {0: 1.},
          {0: .5, 4: .5}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: .5, 4: .5}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: .5, 4: .5}, {0: 1.}, {0: 1.}, {0: 1.},
        ]
        probmove(s, M_UP)
        self.assertEqual(s, [
          {0: .125, 4: .375, 8: .5}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: .875, 4: .125},        {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
        ])

    def test_down(self):
        s = [
          {0: 1.},        {0: 1.}, {0: 1.}, {0: 1.},
          {0: .5, 4: .5}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: .5, 4: .5}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: .5, 4: .5}, {0: 1.}, {0: 1.}, {0: 1.},
        ]
        probmove(s, M_DOWN)
        self.assertEqual(s, [
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: .875, 4: .125},        {0: 1.}, {0: 1.}, {0: 1.},
          {0: .125, 4: .375, 8: .5}, {0: 1.}, {0: 1.}, {0: 1.},
        ])

    def test_left(self):
        s = [
          {0: 1.}, {0: .5, 4: .5}, {0: .5, 4: .5}, {0: .5, 4: .5},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
        ]
        probmove(s, M_LEFT)
        self.assertEqual(s, [
          {0: .125, 4: .375, 8: .5}, {0: .875, 4: .125}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
        ])

    def test_right(self):
        s = [
          {0: 1.}, {0: .5, 4: .5}, {0: .5, 4: .5}, {0: .5, 4: .5},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
        ]
        probmove(s, M_RIGHT)
        self.assertEqual(s, [
          {0: 1.}, {0: 1.}, {0: .875, 4: .125}, {0: .125, 4: .375, 8: .5},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
        ])


class ErrorTest(unittest.TestCase):
    def print_row_sums(self, row):
        print([sum(v.values()) for v in row])
        # check for [1.0, 1.0, 1.0, 1.0]

    def t2est_1(self):
        row = [
            {(2, 0): 0.054522618825907865, (8, 2): 0.037228001520718514, (4, 2): 0.7177558693194529,
             (4, 1): 0.02422611589669511, (2, 1): 0.13900608502427172, (4, 0): 0.02726130941295393},
            {(2, 3): 0.7549838708401713, (8, 2): 0.011364759241479248, (4, 2): 0.21911255817572006,
             (4, 1): 0.0021577785283168893, (2, 1): 0.01238103321431247},
            {0: 0.7549838708401713, (4, 2): 0.01382190781054704, (2, 3): 0.23047731741719946,
             (8, 2): 0.000716903932082319},
            {0: 0.9854611882573707, (2, 3): 0.014538811742629276}
        ]
        merge_prob_line(row)

    def tes2t_1_a(self):
        b = {0: 6.938893903907228e-18, (2, 3): 0.805134857449423, (8, 2): 0.011520754807120524,
             (4, 2): 0.17777885765314105, (4, 1): 0.0014385190188779256, (2, 1): 0.004127011071437488}
        a = {0: 0.7937596357779987, (4, 2): 0.01081431330498323, (2, 3): 0.19486514255057713, (8, 2): 0.0005609083664410418}
        #self.print_row_sums([b, a])
        merge_cells(b, a)

    def test_x(self):
        row = [{0: 0.687023382961372, 8: 0.003086098384932204, 2: 0.19630668448602323, 4: 0.11358383416767262}, {2: 0.8671039844509231, 4: 0.13289601554907676}, {0: 0.687023382961372, 8: 0.003086098384932204, 2: 0.19630668448602323, 4: 0.11358383416767262}, {8: 0.9999999999999998}]
        pprint(row)
        pprint(brute_force_row(row, count=10000))



if __name__ == '__main__':
    unittest.main()
