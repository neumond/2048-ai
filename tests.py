import unittest
from game import *
from newai import probmove, flow_prob_line, merge_prob_line, check_and_clean_row,\
                  merge_cells, put_random_prob, make_prob_state, validate_pyramid_line


M_UP = 0
M_RIGHT = 1
M_DOWN = 2
M_LEFT = 3


class FlowLineTest(unittest.TestCase):
    def check(self, a, b):
        flow_line(a)
        self.assertEqual(a, b)

    def test_1(self):
        self.check([0, 0, 0, 0], [0, 0, 0, 0])
        self.check([0, 0, 2, 0], [2, 0, 0, 0])
        self.check([2, 0, 2, 0], [2, 2, 0, 0])
        self.check([0, 4, 0, 2], [4, 2, 0, 0])
        self.check([2, 2, 2, 2], [2, 2, 2, 2])
        self.check([2, 4, 8,16], [2, 4, 8,16])


class MergeLineTest(unittest.TestCase):
    def check(self, a, b):
        merge_line(a)
        self.assertEqual(a, b)

    def test_1(self):
        self.check([2, 2, 0, 0], [4, 0, 0, 0])
        self.check([2, 2, 2, 2], [4, 4, 0, 0])
        self.check([2, 4, 4, 8], [2, 8, 8, 0])
        self.check([0, 0, 0, 0], [0, 0, 0, 0])


class LineTest(unittest.TestCase):
    def check(self, a, b):
        flow_line(a)
        merge_line(a)
        self.assertEqual(a, b)

    def test_1(self):
        self.check([8, 0,16, 0], [8,16, 0, 0])
        self.check([0, 2, 0, 4], [2, 4, 0, 0])
        self.check([8, 0, 8, 0], [16,0, 0, 0])
        self.check([8, 4, 4, 4], [8, 8, 4, 0])


class CanMoveTest(unittest.TestCase):
    def test_row_movable(self):
        self.assertEqual(row_movable([2, 4, 2, 4]), False)
        self.assertEqual(row_movable([0, 4, 2, 4]), True)
        self.assertEqual(row_movable([2, 4, 2, 0]), False)
        self.assertEqual(row_movable([0, 0, 0, 0]), False)
        self.assertEqual(row_movable([8, 0, 0, 0]), False)
        self.assertEqual(row_movable([0, 8, 0, 0]), True)
        self.assertEqual(row_movable([8, 8, 8, 8]), True)


class PutRandomTest(unittest.TestCase):
    def test_1(self):
        s = [2, 512, 4, 2, 0, 8, 128, 8, 32, 16, 256, 16, 2, 2, 32, 8]
        s = make_prob_state(s)
        print(s)
        put_random_prob(s)
        put_random_prob(s)
        print(s)


class FlowProbLineTest(unittest.TestCase):
    maxDiff = None
    def check(self, a, b):
        flow_prob_line(a)
        check_and_clean_row(a)
        self.assertEqual(a, b)

    def test_1(self):
        self.check([
          {0: 1.},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ], [
          {0: 1.},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ])

    def test_2(self):
        self.check([
          {0: 1.},
          {0: 1.},
          {0: .5, 2: .5},
          {0: 1.},
        ], [
          {0: .5, (2, 2): .5},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ])

    def test_3(self):
        self.check([
          {0: 1.},
          {0: .5, 4: .5},
          {0: .5, 2: .5},
          {0: 1.},
        ], [
          {0: .25, (2, 2): .25, (4, 1): .5},
          {0: .75, (2, 2): .25},
          {0: 1.},
          {0: 1.},
        ])

    def test_5(self):
        self.check([
          {0: .5, 4: .5},
          {0: 1.},
          {0: 1.},
          {0: .5, 4: .5},
        ], [
          {0: .25, (4, 0): .5, (4, 3): .25},
          {0: .75, (4, 3): .25},
          {0: 1.},
          {0: 1.},
        ])

    def test_7(self):
        self.check([
          {0: 1.},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
        ], [
          {0: .125, (4, 1): .5, (4, 2): .25, (4, 3): .125},
          {0: .5, (4, 2): .25, (4, 3): .25},
          {0: .875, (4, 3): .125},
          {0: 1.},
        ])

    def test_8(self):
        x = 1/16
        self.check([
          {0: .5, 4: .5},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
        ], [
          {0: 1*x, (4, 0): 8*x, (4, 1): 4*x, (4, 2): 2*x, (4, 3): x},
          {0: 5*x, (4, 1): 4*x, (4, 2): 4*x, (4, 3): 3*x},
          {0: 11*x, (4, 2): 2*x, (4, 3): 3*x},
          {0: 15*x, (4, 3): x},
        ])


class MergeCellTest(unittest.TestCase):
    maxDiff = None

    def test_1(self):
        b, a, sh = merge_cells({
            (4, 0): 8/16,
            (4, 1): 4/16,
            (4, 2): 2/16,
            (4, 3): 1/16,
            0: 1/16,
        }, {
            (4, 1): 4/16,
            (4, 2): 4/16,
            (4, 3): 3/16,
            0: 5/16,
        })
        self.assertEqual(b, {
            8: 11/16,
            (4, 0): 1/16,
            (4, 1): 1/16,
            (4, 2): 1/16,
            (4, 3): 1/16,
            0: 1/16,
        })
        #self.assertEqual(sh, {})
        #self.assertEqual(a, {
            #(4, 2): 2/16,
            #(4, 3): 3/16,
            #0: 11/16,
        #})

    def test_2(self):
        b, a, sh = merge_cells({
            (4, 1): 8/16,
            0: 8/16,
        }, {
            (4, 2): 2/16,
            (8, 2): 2/16,
            0: 12/16,
        })
        self.assertEqual(b, {0: 0.5, 8: 0.125, (4, 1): 0.375})
        self.assertEqual(a, {
            (8, 2): 2/16,
            0: 12/16,
        })
        self.assertEqual(sh, {2: 2/16})

    def test_2_1(self):
        b, a, sh = merge_cells({
          0: 2/16,
          (2, 2): 4/16,
          (2, 3): 2/16,
          (4, 1): 8/16,
        }, {
          0: 10/16,
          (2, 3): 6/16,
        })
        self.assertEqual(b, {0: 2/16, (2, 2): 2/16, (2, 3): 2/16, (4, 1): 8/16, 4: 2/16})
        self.assertEqual(a, {0: 10/16, (2, 3): 4/16})
        self.assertEqual(sh, {3: 2/16})


class MergeProbLineTest(unittest.TestCase):
    maxDiff = None
    def check(self, a, b):
        merge_prob_line(a)
        check_and_clean_row(a)
        self.assertEqual(a, b)

    def test_1(self):
        self.check([
          {0: .25, (2, 2): .25, (4, 1): .5},
          {0: .75, (2, 2): .25},
          {0: 1.},
          {0: 1.},
        ], [
          {0: .25, 2: .25, 4: .5},
          {0: .75, 2: .25},
          {0: 1.},
          {0: 1.},
        ])

    def test_2(self):
        self.check([
          {0: 2/16, (2, 2): 4/16, (2, 3): 2/16, (4, 1): 8/16},
          {0: 10/16, (2, 3): 6/16},
          {0: 1.},
          {0: 1.},
        ], [
          {0: 2/16, 2: 4/16, 4: 10/16},
          {0: 12/16, 2: 4/16},
          {0: 1.},
          {0: 1.},
        ])

    def test_5(self):
        self.check([
          {0: .25, (4, 0): .5, (4, 3): .25},
          {0: .75, (4, 3): .25},
          {0: 1.},
          {0: 1.},
        ], [
          {0: .25, 4: .5, 8: .25},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ])

    def test_7(self):
        self.check([
          {0: .125, (4, 1): .5, (4, 2): .25, (4, 3): .125},
          {0: .5, (4, 2): .25, (4, 3): .25},
          {0: .875, (4, 3): .125},
          {0: 1.},
        ], [
          {0: 1/8, 4: 3/8, 8: 4/8},
          {0: 7/8, 4: 1/8},
          {0: 1.},
          {0: 1.},
        ])

    def test_8(self):
        x = 1/16
        self.check([
          {0: 1*x, (4, 0): 8*x, (4, 1): 4*x, (4, 2): 2*x, (4, 3): x},
          {0: 5*x, (4, 1): 4*x, (4, 2): 4*x, (4, 3): 3*x},
          {0: 11*x, (4, 2): 2*x, (4, 3): 3*x},
          {0: 15*x, (4, 3): x},
        ], [
          {0: x, 4: 4*x, 8: 11*x},
          {0: 11*x, 4: 4*x, 8: x},
          {0: 1.},
          {0: 1.},
        ])


class ProbLineTest(unittest.TestCase):
    maxDiff = None
    def check(self, a, b):
        flow_prob_line(a)
        merge_prob_line(a)
        check_and_clean_row(a)
        self.assertEqual(a, b)

    def test_1(self):
        self.check([
          {0: 1.},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ], [
          {0: 1.},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ])

    def test_2(self):
        self.check([
          {0: 1.},
          {0: 1.},
          {0: .5, 2: .5},
          {0: 1.},
        ], [
          {0: .5, 2: .5},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ])

    def test_3(self):
        self.check([
          {0: 1.},
          {0: .5, 4: .5},
          {0: .5, 2: .5},
          {0: 1.},
        ], [
          {0: .25, 2: .25, 4: .5},
          {0: .75, 2: .25},
          {0: 1.},
          {0: 1.},
        ])

    def test_4(self):
        self.check([
          {0: .5, 4: .5},
          {0: 1.},
          {0: 1.},
          {0: .5, 2: .5},
        ], [
          {0: .25, 2: .25, 4: .5},
          {0: .75, 2: .25},
          {0: 1.},
          {0: 1.},
        ])

    def test_5(self):
        self.check([
          {0: .5, 4: .5},
          {0: 1.},
          {0: 1.},
          {0: .5, 4: .5},
        ], [
          {0: .25, 4: .5, 8: .25},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ])

    def test_6(self):
        self.check([
          {0: 1.},
          {0: .5, 4: .5},
          {0: 1.},
          {0: .5, 4: .5},
        ], [
          {0: .25, 4: .5, 8: .25},
          {0: 1.},
          {0: 1.},
          {0: 1.},
        ])

    def test_7(self):
        self.check([
          {0: 1.},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
        ], [
          {0: .125, 4: .375, 8: .5},
          {0: .875, 4: .125},
          {0: 1.},
          {0: 1.},
        ])

    def test_8(self):
        x = 1/16
        self.check([
          {0: .5, 4: .5},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
          {0: .5, 4: .5},
        ], [
          {0: x, 4: 4*x, 8: 11*x},
          {0: 11*x, 4: 4*x, 8: x},
          {0: 1.},
          {0: 1.},
        ])


class ProbMoveTest(unittest.TestCase):
    maxDiff = None

    def test_up(self):
        s = [
          {0: 1.},        {0: 1.}, {0: 1.}, {0: 1.},
          {0: .5, 4: .5}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: .5, 4: .5}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: .5, 4: .5}, {0: 1.}, {0: 1.}, {0: 1.},
        ]
        probmove(s, M_UP)
        self.assertEqual(s, [
          {0: .125, 4: .375, 8: .5}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: .875, 4: .125},        {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
        ])

    def test_down(self):
        s = [
          {0: 1.},        {0: 1.}, {0: 1.}, {0: 1.},
          {0: .5, 4: .5}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: .5, 4: .5}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: .5, 4: .5}, {0: 1.}, {0: 1.}, {0: 1.},
        ]
        probmove(s, M_DOWN)
        self.assertEqual(s, [
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: .875, 4: .125},        {0: 1.}, {0: 1.}, {0: 1.},
          {0: .125, 4: .375, 8: .5}, {0: 1.}, {0: 1.}, {0: 1.},
        ])

    def test_left(self):
        s = [
          {0: 1.}, {0: .5, 4: .5}, {0: .5, 4: .5}, {0: .5, 4: .5},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
        ]
        probmove(s, M_LEFT)
        self.assertEqual(s, [
          {0: .125, 4: .375, 8: .5}, {0: .875, 4: .125}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
        ])

    def test_right(self):
        s = [
          {0: 1.}, {0: .5, 4: .5}, {0: .5, 4: .5}, {0: .5, 4: .5},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
        ]
        probmove(s, M_RIGHT)
        self.assertEqual(s, [
          {0: 1.}, {0: 1.}, {0: .875, 4: .125}, {0: .125, 4: .375, 8: .5},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
          {0: 1.}, {0: 1.}, {0: 1.}, {0: 1.},
        ])


class BugTest(unittest.TestCase):
    def test_1(self):
        s = [
            {(8, 0): 0.07115763920497647, (4, 0): 0.9288423607950236},
            {(2, 2): 0.5720875372542142, (8, 1): 0.003551851981528808, (4, 2): 0.0949262533069968, (4, 1): 0.12165095909084939, (2, 1): 0.20778339836641074},
            {(4, 2): 0.04738902510295617, (8, 3): 0.047463126653498396, (4, 3): 0.6195506639077126, (2, 2): 0.2855971843358328},
            {0: 0.667013790561211, (8, 3): 0.02369451255147808, (4, 3): 0.30929169688731095}
        ]
        check_and_clean_row(s, clean=False)
        validate_pyramid_line(s)
        merge_prob_line(s)
        s1 = [
            {(8, 0): 0.07090489780316536, (4, 0): 0.7276762715370029, 8: 0.00025274140181110767, 4: 0.2011660892580207},
            {(2, 2): 0.6075581465420683, (8, 1): 0.0032991105797177, (4, 2): 0.0126403519140794, (4, 1): 0.008656395055926011,
             (2, 1): 0.20778339836641074, (8, 3): 0.011389676566090603, (4, 3): 0.14867292097570722},
            {(4, 2): 0.04150340127277624, (8, 3): 0.03901626200249775, (4, 3): 0.5092911641349495, (2, 2): 0.25012657504797875, 0: 0.1600625975417978},
            {0: 0.708370023679245, (8, 3): 0.020751700636388117, (4, 3): 0.2708782756843669},
        ]
        check_and_clean_row(s1, clean=False)
        validate_pyramid_line(s1)

        # 1.0 merge cells 0 <- 1
        #     merged 8: 0.07115763920497647 * 0.003551851981528808 / 1.0 (accesible range) = 0.00025274140181110767
        #         added {1: 0.00025274140181110767} to next shifts
        #     merged 4: 0.9288423607950236 * 0.0949262533069968 / 1.0 = 0.08817152522309733
        #         added {2: 0.08817152522309733} to next shifts
        #     merged 4: 0.9288423607950236 * 0.12165095909084939 / 1.0 = 0.11299456403492338
        #         added {1: 0.11299456403492338} to next shifts
        #     result:
        #         cell 0: + {8: 0.00025274140181110767, 4: 0.2011660892580207}
        #                 - {(8, 0): -0.00025274140181110767, (4, 0): -0.2011660892580207}
        #                 = {(8, 0): 0.07090489780316536, (4, 0): 0.7276762715370029, 8: 0.00025274140181110767, 4: 0.2011660892580207}
        #         cell 1: - {(8, 1): -0.00025274140181110767, (4, 2): -0.08817152522309733, (4, 1): -0.11299456403492338}
        #                 = {(2, 2): 0.5720875372542142, (8, 1): 0.0032991105797177, (4, 2): 0.006754728083899472, (4, 1): 0.008656395055926011,
        #                    (2, 1): 0.20778339836641074}
        #         levels: {1: 0.11324730543673449, 2: 0.08817152522309733}
        # 1.1 shift cells 1 <- 2
        #     cell 1 (target) = {(2, 2): 0.5720875372542142, (8, 1): 0.0032991105797177, (4, 2): 0.006754728083899472, (4, 1): 0.008656395055926011,
        #                        (2, 1): 0.20778339836641074}
        #     cell 2 (source) = {(4, 2): 0.04738902510295617, (8, 3): 0.047463126653498396, (4, 3): 0.6195506639077126, (2, 2): 0.2855971843358328}
        #     shifting level 2: 0.08817152522309733
        #         accesible range for level 2: {(8, 3): 0.047463126653498396, (4, 3): 0.6195506639077126} + zero=0.0
        #         required in cell2 for level 1 in cell1: 0.21973890400205445
        #         required in cell2 for level 0 in cell1: 0.0
        #         range sum: 0.667013790561211 + 0.0
        #         final range sum: 0.4472748865591566 + 0.0   # excluding required
        #         k = 0.4472748865591566 / 0.667013790561211 = 0.6705631770863825
        #         moving (8, 3): 0.08817152522309733 * (0.047463126653498396 * 0.6705631770863825) / 0.4472748865591566 = 0.006274077579977643
        #         moving (4, 3): 0.08817152522309733 * (0.6195506639077126 * 0.6705631770863825) / 0.4472748865591566 = 0.08189744764311968
        #         target cell after moving: {(2, 2): 0.5720875372542142, (8, 1): 0.0032991105797177, (4, 2): 0.006754728083899472,
        #                                    (4, 1): 0.008656395055926011, (2, 1): 0.20778339836641074, (8, 3): 0.006274077579977643,
        #                                    (4, 3): 0.08189744764311968}
        #         source cell after moving: {(4, 2): 0.04738902510295617, (8, 3): 0.04118904907352075, (4, 3): 0.537653216264593,
        #                                    (2, 2): 0.2855971843358328}
        #         levels: {3: 0.08817152522309732}
        #     shifting level 1: 0.11324730543673449
        #         accesible range for level 1: {(4, 2): 0.04738902510295617, (8, 3): 0.04118904907352075, (4, 3): 0.537653216264593,
        #                                       (2, 2): 0.2855971843358328} + zero=0.0
        #         required in cell2 for level 1:
        #         range sum: 0.9118284747769027 + 0.0
        #         moving (4, 2): 0.11324730543673449 * 0.04738902510295617 / 0.9118284747769027 = 0.005885623830179928
        #         moving (8, 3): 0.11324730543673449 * 0.04118904907352075 / 0.9118284747769027 = 0.00511559898611296
        #         moving (4, 3): 0.11324730543673449 * 0.537653216264593 / 0.9118284747769027 = 0.06677547333258753
        #         moving (2, 2): 0.11324730543673449 * 0.2855971843358328 / 0.9118284747769027 = 0.035470609287854074
        #         target cell after moving: {(2, 2): 0.6075581465420683, (8, 1): 0.0032991105797177, (4, 2): 0.0126403519140794,
        #                                    (4, 1): 0.008656395055926011, (2, 1): 0.20778339836641074, (8, 3): 0.011389676566090603,
        #                                    (4, 3): 0.14867292097570722}
        #         source cell after moving: {(4, 2): 0.04150340127277624, (8, 3): 0.03607345008740779, (4, 3): 0.4708777429320054,
        #                                    (2, 2): 0.25012657504797875}
        #         levels: {2: 0.041356233118034005, 3: 0.07189107231870048}
        #     levels: {2: 0.041356233118034005, 3: 0.1600625975417978}
        # 1.2 shift cells 2 <- 3
        #     cell 2 (target) = {(4, 2): 0.04150340127277624, (8, 3): 0.03607345008740779, (4, 3): 0.4708777429320054, (2, 2): 0.25012657504797875}
        #     cell 3 (source) = {0: 0.667013790561211, (8, 3): 0.02369451255147808, (4, 3): 0.30929169688731095}
        #     shifting level 3: 0.1600625975417978
        #         accesible range for level 3: {} + zero=0.667013790561211
        #         range sum: 0.0 + 0.667013790561211
        #         moving 0: 0.1600625975417978
        #         target cell after moving: {(4, 2): 0.04150340127277624, (8, 3): 0.03607345008740779, (4, 3): 0.4708777429320054,
        #                                    (2, 2): 0.25012657504797875, 0: 0.1600625975417978}
        #         source cell after moving: {0: 0.5069511930194133, (8, 3): 0.02369451255147808, (4, 3): 0.30929169688731095}
        #     shifting level 2: 0.041356233118034005
        #         accesible range for level 2: {0: 0.5069511930194133, (8, 3): 0.02369451255147808, (4, 3): 0.30929169688731095}
        #         range sum: 0.33298620943878904 + 0.5069511930194133 = 0.8399374024582023
        #         range sum: 0.33298620943878904 (enough for 0.041356233118034005)
        #         firstly, MOVING WITHOUT ZERO:
        #         moving (8, 3): 0.041356233118034005 * 0.02369451255147808 / 0.33298620943878904 = 0.002942811915089962
        #         moving (4, 3): 0.041356233118034005 * 0.30929169688731095 / 0.33298620943878904 = 0.03841342120294404
        #         target cell after moving: {(4, 2): 0.04150340127277624, (8, 3): 0.03901626200249775, (4, 3): 0.5092911641349495,
        #                                    (2, 2): 0.25012657504797875, 0: 0.1600625975417978}
        #         source cell after moving: {0: 0.5069511930194133, (8, 3): 0.020751700636388117, (4, 3): 0.2708782756843669}
        #         secondly, move zero. No need.
        # 1.3 add zero to 3
        #         1 - sum: 0.20141883065983168
        #         cell after moving: {0: 0.708370023679245, (8, 3): 0.020751700636388117, (4, 3): 0.2708782756843669}
        # 1.after
        #     [
        #         {(8, 0): 0.07090489780316536, (4, 0): 0.7276762715370029, 8: 0.00025274140181110767, 4: 0.2011660892580207},
        #         {(2, 2): 0.6075581465420683, (8, 1): 0.0032991105797177, (4, 2): 0.0126403519140794, (4, 1): 0.008656395055926011,
        #          (2, 1): 0.20778339836641074, (8, 3): 0.011389676566090603, (4, 3): 0.14867292097570722},
        #         {(4, 2): 0.04150340127277624, (8, 3): 0.03901626200249775, (4, 3): 0.5092911641349495, (2, 2): 0.25012657504797875,
        #          0: 0.1600625975417978},
        #         {0: 0.708370023679245, (8, 3): 0.020751700636388117, (4, 3): 0.2708782756843669},
        #     ]



if __name__ == '__main__':
    unittest.main()
